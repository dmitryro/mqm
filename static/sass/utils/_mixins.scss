/*------------------------------------*\
    $MIXINS
\*------------------------------------*/

//=MIXINS - FONTS


/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * 
   `@include font-size(10px);`
 * 
 */
@mixin font-size($font-size){
    font-size:$font-size;
    line-height:ceil($font-size * 1.5);
}


/**
 * Create vendor-prefixed CSS in one go, e.g.
 * 
   `@include vendor(border-radius, 4px);`
 * 
 */
@mixin vendor($property, $value){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}




@mixin transition($duration : 0.5s, $easing : ease-in-out) {
  -moz-transition: all $duration $easing;
  -webkit-transition: all $duration $easing;
  -o-transition: all $duration $easing;
  transition: all $duration $easing;
}


@mixin border($value : 3px) {
  -webkit-border-radius: $value;
  -moz-border-radius: $value;
  -khtml-border-radius: $value;
  border-radius: $value;
}

@mixin opacity ($opacity) {
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity*100})";
    filter: alpha(opacity=$opacity*100);
    -moz-opacity:$opacity;
    -khtml-opacity: $opacity;
    -webkit-opacity: $opacity;
    opacity: $opacity;
}

@mixin button($bgcolor : $directive, $color : #fff, $fSize: 15px, $content: "\203A") {
  background:$bgcolor;
  color: $color;
  padding:7px 5px 3px 5px; 
  @include GillBold;
  text-transform:uppercase; 
  font-size:$fSize; 
  cursor:pointer; 
  display:inline-block;
  @include border(2px); 
  @include transition; 
  &:after{
    content:$content; 
    font-size:15px; 
    padding-left:6px;
    }
  &:hover {
    color:$color;
    background:lighten($bgcolor, 15%);
    //@include opacity(0.5);
    }
}


/* --- Hex-to-RGBA --- */

@mixin rgba($color, $value) {
 background-color: $color;
 background-color: rgba($color, $value) 
}

// @include rgba(#d13400, .3);  



/* --- BORDER RADIUS --- */

@mixin rounded($side, $radius: 10px) {
  border-#{$side}-radius: $radius;
  -moz-border-radius-#{$side}: $radius;
  -webkit-border-#{$side}-radius: $radius;
}


/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 * 
   .foo{
       @include vendor(animation, shrink 3s);
   }
   
   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 * 
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */
@mixin keyframe ($animation-name){
    @-webkit-keyframes $animation-name{
        @content;
    }
    
    @-moz-keyframes $animation-name{
        @content;
    }
    
    @-ms-keyframes $animation-name{
        @content;
    }
    
    @-o-keyframes $animation-name{
        @content;
    }
    
    @keyframes $animation-name{
        @content;
    }
}



/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 * 
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * lap-and-up
 * portable
 * desk
 * 
 * Not using a media query will, naturally, serve styles to all devices.
 * 
 * `@include media-query(palm){ [styles here] }`
 * 
 * We work out your end points for you:
 */
$palm-end:              $lap-start - 1px;
$lap-end:               $desk-start - 1px;

@mixin media-query($media-query){

    @if $media-query == palm{
        
        @media only screen and (max-width:$palm-end) { @content; }
        
    }
    
    @if $media-query == lap{
        
        @media only screen and (min-width:$lap-start) and (max-width:$lap-end) { @content; }
        
    }
    
    @if $media-query == lap-and-up{
        
        @media only screen and (min-width:$lap-start) { @content; }
        
    }
    
    @if $media-query == portable{
        
        @media only screen and (max-width:$lap-end) { @content; }
        
    }
    
    @if $media-query == desk{
        
        @media only screen and (min-width:$desk-start) { @content; }
        
    }
    
}
